{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getSubreddits } from '../api/accuWeatherFuncs';\nexport const loadAllSubreddits = createAsyncThunk('subrredits/loadAllSubreddit', async () => {\n  const subreddits = await getSubreddits();\n  return subreddits.data.children.map(subreddit => subreddit.data);\n});\nexport const subredditsSlice = createSlice({\n  name: 'subreddits',\n  initialState: {\n    subreddits: [],\n    currentSubreddit: 'r/popular',\n    isLoadingSubreddits: false,\n    hasError: false\n  },\n  reducers: {\n    changeCurrentSubreddit(state, action) {\n      const {\n        newSubreddit\n      } = action.payload;\n      state.currentSubreddit = newSubreddit;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loadAllSubreddits.pending, state => {\n      state.isLoadingSubreddits = true;\n      state.hasError = false;\n    }).addCase(loadAllSubreddits.fulfilled, (state, action) => {\n      state.isLoadingSubreddits = false;\n      state.subreddits = action.payload;\n    }).addCase(loadAllSubreddits.rejected, state => {\n      state.isLoadingSubreddits = false;\n      state.hasError = true;\n      state.subreddits = [];\n    });\n  }\n});\nexport const selectAllSubreddits = state => state.subreddits.subreddits;\nexport const selectCurrentSubreddit = state => state.subreddits.currentSubreddit;\nexport const isLoading = state => state.subreddits.isLoadingPostPreviews;\nexport const {\n  changeCurrentSubreddit\n} = subredditsSlice.actions;\nexport default subredditsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getSubreddits","loadAllSubreddits","subreddits","data","children","map","subreddit","subredditsSlice","name","initialState","currentSubreddit","isLoadingSubreddits","hasError","reducers","changeCurrentSubreddit","state","action","newSubreddit","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","selectAllSubreddits","selectCurrentSubreddit","isLoading","isLoadingPostPreviews","actions","reducer"],"sources":["C:/Users/Liora Ferrero/Documents/Weather App/weather-app/src/features/subredditsSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { getSubreddits } from '../api/accuWeatherFuncs';\r\n\r\nexport const loadAllSubreddits = createAsyncThunk(\r\n  'subrredits/loadAllSubreddit',\r\n  async () => {\r\n    const subreddits = await getSubreddits();\r\n    return subreddits.data.children.map((subreddit) => subreddit.data);\r\n  }\r\n);\r\n\r\nexport const subredditsSlice = createSlice({\r\n  name: 'subreddits',\r\n  initialState: {\r\n    subreddits: [],\r\n    currentSubreddit: 'r/popular',\r\n    isLoadingSubreddits: false,\r\n    hasError: false\r\n  },\r\n  reducers: {\r\n    changeCurrentSubreddit(state, action) {\r\n      const { newSubreddit } = action.payload;\r\n      state.currentSubreddit = newSubreddit;\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loadAllSubreddits.pending, (state) => {\r\n        state.isLoadingSubreddits = true;\r\n        state.hasError = false;\r\n      })\r\n      .addCase(loadAllSubreddits.fulfilled, (state, action) => {\r\n        state.isLoadingSubreddits = false;\r\n        state.subreddits = action.payload;\r\n      })\r\n      .addCase(loadAllSubreddits.rejected, (state) => {\r\n        state.isLoadingSubreddits = false;\r\n        state.hasError = true;\r\n        state.subreddits = [];\r\n      })\r\n  },\r\n});\r\n\r\nexport const selectAllSubreddits = (state) => state.subreddits.subreddits;\r\nexport const selectCurrentSubreddit = (state) => state.subreddits.currentSubreddit;\r\n\r\nexport const isLoading = (state) => state.subreddits.isLoadingPostPreviews;\r\n\r\nexport const { changeCurrentSubreddit } = subredditsSlice.actions;\r\n\r\nexport default subredditsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,aAAa,QAAQ,yBAAyB;AAEvD,OAAO,MAAMC,iBAAiB,GAAGH,gBAAgB,CAC/C,6BAA6B,EAC7B,YAAY;EACV,MAAMI,UAAU,GAAG,MAAMF,aAAa,EAAE;EACxC,OAAOE,UAAU,CAACC,IAAI,CAACC,QAAQ,CAACC,GAAG,CAAEC,SAAS,IAAKA,SAAS,CAACH,IAAI,CAAC;AACpE,CAAC,CACF;AAED,OAAO,MAAMI,eAAe,GAAGR,WAAW,CAAC;EACzCS,IAAI,EAAE,YAAY;EAClBC,YAAY,EAAE;IACZP,UAAU,EAAE,EAAE;IACdQ,gBAAgB,EAAE,WAAW;IAC7BC,mBAAmB,EAAE,KAAK;IAC1BC,QAAQ,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE;IACRC,sBAAsB,CAACC,KAAK,EAAEC,MAAM,EAAE;MACpC,MAAM;QAAEC;MAAa,CAAC,GAAGD,MAAM,CAACE,OAAO;MACvCH,KAAK,CAACL,gBAAgB,GAAGO,YAAY;IACvC;EACF,CAAC;EACDE,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACpB,iBAAiB,CAACqB,OAAO,EAAGP,KAAK,IAAK;MAC7CA,KAAK,CAACJ,mBAAmB,GAAG,IAAI;MAChCI,KAAK,CAACH,QAAQ,GAAG,KAAK;IACxB,CAAC,CAAC,CACDS,OAAO,CAACpB,iBAAiB,CAACsB,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACJ,mBAAmB,GAAG,KAAK;MACjCI,KAAK,CAACb,UAAU,GAAGc,MAAM,CAACE,OAAO;IACnC,CAAC,CAAC,CACDG,OAAO,CAACpB,iBAAiB,CAACuB,QAAQ,EAAGT,KAAK,IAAK;MAC9CA,KAAK,CAACJ,mBAAmB,GAAG,KAAK;MACjCI,KAAK,CAACH,QAAQ,GAAG,IAAI;MACrBG,KAAK,CAACb,UAAU,GAAG,EAAE;IACvB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMuB,mBAAmB,GAAIV,KAAK,IAAKA,KAAK,CAACb,UAAU,CAACA,UAAU;AACzE,OAAO,MAAMwB,sBAAsB,GAAIX,KAAK,IAAKA,KAAK,CAACb,UAAU,CAACQ,gBAAgB;AAElF,OAAO,MAAMiB,SAAS,GAAIZ,KAAK,IAAKA,KAAK,CAACb,UAAU,CAAC0B,qBAAqB;AAE1E,OAAO,MAAM;EAAEd;AAAuB,CAAC,GAAGP,eAAe,CAACsB,OAAO;AAEjE,eAAetB,eAAe,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
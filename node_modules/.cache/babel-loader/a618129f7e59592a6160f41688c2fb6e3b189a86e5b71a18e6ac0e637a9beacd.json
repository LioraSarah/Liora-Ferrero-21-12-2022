{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getAutocomplete } from '../../api/accuWeatherFuncs';\nexport const loadCurrentCondition = createAsyncThunk('currentCity/loadCurrentCondition', async payload => {\n  if (payload) {\n    const CurrentCondition = await getAutocomplete(payload);\n    console.log(CurrentCondition);\n    return CurrentCondition;\n  }\n});\nexport const currentCitySlice = createSlice({\n  name: 'currentCity',\n  initialState: {\n    currentCityKey: '',\n    cityCondition: {},\n    isLoadingCurrentCondition: false,\n    hasError: false\n  },\n  reducers: {\n    setCurrentCityKey(state, action) {\n      state.currentCityKey = action.payload;\n    },\n    clearCurrentCityKey(state) {\n      state.currentCityKey = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loadCurrentCondition.pending, state => {\n      state.isLoadingAutocomplete = true;\n      state.hasError = false;\n    }).addCase(loadCurrentCondition.fulfilled, (state, action) => {\n      state.isLoadingAutocomplete = false;\n      state.cityCondition = action.payload;\n    }).addCase(loadCurrentCondition.rejected, state => {\n      state.isLoadingAutocomplete = false;\n      state.hasError = true;\n      state.cityCondition = {};\n    });\n  }\n});\n\n//selectors\nexport const selectCurrentCityKey = state => state.currentCity.currentCityKey;\nexport const isLoading = state => state.currentCity.isLoadingCurrentCondition;\nexport const selectCurrentCondition = state => state.currentCity.cityCondition;\n//actions\nexport const {\n  setCurrentCityKey,\n  clearCurrentCityKey\n} = currentCitySlice.actions;\n//reducer\nexport default currentCitySlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getAutocomplete","loadCurrentCondition","payload","CurrentCondition","console","log","currentCitySlice","name","initialState","currentCityKey","cityCondition","isLoadingCurrentCondition","hasError","reducers","setCurrentCityKey","state","action","clearCurrentCityKey","extraReducers","builder","addCase","pending","isLoadingAutocomplete","fulfilled","rejected","selectCurrentCityKey","currentCity","isLoading","selectCurrentCondition","actions","reducer"],"sources":["C:/Users/Liora Ferrero/Documents/Weather App/weather-app/src/features/currentCity/correntCitySlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { getAutocomplete } from '../../api/accuWeatherFuncs';\r\n\r\nexport const loadCurrentCondition = createAsyncThunk(\r\n  'currentCity/loadCurrentCondition',\r\n  async (payload) => {\r\n    if (payload) {\r\n        const CurrentCondition = await getAutocomplete(payload);\r\n        console.log(CurrentCondition);\r\n        return CurrentCondition;\r\n    }\r\n  }\r\n);\r\n\r\nexport const currentCitySlice = createSlice({\r\n    name: 'currentCity',\r\n    initialState: {\r\n      currentCityKey: '',\r\n      cityCondition: {},\r\n      isLoadingCurrentCondition: false,\r\n      hasError: false\r\n    },\r\n    reducers: {\r\n        setCurrentCityKey(state, action) {\r\n            state.currentCityKey = action.payload\r\n        },\r\n        clearCurrentCityKey(state) {\r\n            state.currentCityKey = ''\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n          .addCase(loadCurrentCondition.pending, (state) => {\r\n            state.isLoadingAutocomplete = true;\r\n            state.hasError = false;\r\n          })\r\n          .addCase(loadCurrentCondition.fulfilled, (state, action) => {\r\n            state.isLoadingAutocomplete = false;\r\n            state.cityCondition = action.payload;\r\n          })\r\n          .addCase(loadCurrentCondition.rejected, (state) => {\r\n            state.isLoadingAutocomplete = false;\r\n            state.hasError = true;\r\n            state.cityCondition = {};\r\n          })\r\n      }\r\n});\r\n\r\n\r\n//selectors\r\nexport const selectCurrentCityKey = (state) => state.currentCity.currentCityKey;\r\nexport const isLoading = (state) => state.currentCity.isLoadingCurrentCondition;\r\nexport const selectCurrentCondition = (state) => state.currentCity.cityCondition;\r\n//actions\r\nexport const {setCurrentCityKey, clearCurrentCityKey} = currentCitySlice.actions;\r\n//reducer\r\nexport default currentCitySlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,eAAe,QAAQ,4BAA4B;AAE5D,OAAO,MAAMC,oBAAoB,GAAGH,gBAAgB,CAClD,kCAAkC,EAClC,MAAOI,OAAO,IAAK;EACjB,IAAIA,OAAO,EAAE;IACT,MAAMC,gBAAgB,GAAG,MAAMH,eAAe,CAACE,OAAO,CAAC;IACvDE,OAAO,CAACC,GAAG,CAACF,gBAAgB,CAAC;IAC7B,OAAOA,gBAAgB;EAC3B;AACF,CAAC,CACF;AAED,OAAO,MAAMG,gBAAgB,GAAGP,WAAW,CAAC;EACxCQ,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,cAAc,EAAE,EAAE;IAClBC,aAAa,EAAE,CAAC,CAAC;IACjBC,yBAAyB,EAAE,KAAK;IAChCC,QAAQ,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE;IACNC,iBAAiB,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC7BD,KAAK,CAACN,cAAc,GAAGO,MAAM,CAACd,OAAO;IACzC,CAAC;IACDe,mBAAmB,CAACF,KAAK,EAAE;MACvBA,KAAK,CAACN,cAAc,GAAG,EAAE;IAC7B;EACJ,CAAC;EACDS,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACJC,OAAO,CAACnB,oBAAoB,CAACoB,OAAO,EAAGN,KAAK,IAAK;MAChDA,KAAK,CAACO,qBAAqB,GAAG,IAAI;MAClCP,KAAK,CAACH,QAAQ,GAAG,KAAK;IACxB,CAAC,CAAC,CACDQ,OAAO,CAACnB,oBAAoB,CAACsB,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC1DD,KAAK,CAACO,qBAAqB,GAAG,KAAK;MACnCP,KAAK,CAACL,aAAa,GAAGM,MAAM,CAACd,OAAO;IACtC,CAAC,CAAC,CACDkB,OAAO,CAACnB,oBAAoB,CAACuB,QAAQ,EAAGT,KAAK,IAAK;MACjDA,KAAK,CAACO,qBAAqB,GAAG,KAAK;MACnCP,KAAK,CAACH,QAAQ,GAAG,IAAI;MACrBG,KAAK,CAACL,aAAa,GAAG,CAAC,CAAC;IAC1B,CAAC,CAAC;EACN;AACN,CAAC,CAAC;;AAGF;AACA,OAAO,MAAMe,oBAAoB,GAAIV,KAAK,IAAKA,KAAK,CAACW,WAAW,CAACjB,cAAc;AAC/E,OAAO,MAAMkB,SAAS,GAAIZ,KAAK,IAAKA,KAAK,CAACW,WAAW,CAACf,yBAAyB;AAC/E,OAAO,MAAMiB,sBAAsB,GAAIb,KAAK,IAAKA,KAAK,CAACW,WAAW,CAAChB,aAAa;AAChF;AACA,OAAO,MAAM;EAACI,iBAAiB;EAAEG;AAAmB,CAAC,GAAGX,gBAAgB,CAACuB,OAAO;AAChF;AACA,eAAevB,gBAAgB,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
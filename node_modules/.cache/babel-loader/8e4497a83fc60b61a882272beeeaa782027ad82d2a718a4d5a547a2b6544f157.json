{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getAutocomplete } from '../../api/accuWeatherFuncs';\n\n// export const loadAutocomplete = createAsyncThunk(\n//   'search/loadAutocomplete',\n//   async (payload) => {\n//     let autocomplete = [];\n//     if (payload.text){\n//       autocomplete = await getAutocomplete(payload);\n//     }\n//     //autocomplete.data.children.map((subreddit) => subreddit.data);\n//     return autocomplete;\n//   }\n// );\n\nexport const favoritesSlice = createSlice({\n  name: 'favorites',\n  initialState: {\n    allFavorites: []\n  },\n  reducers: {\n    addFavorite(state, action) {\n      const cityInfo = {\n        key: action.payload.key,\n        name: action.payload.name,\n        current: action.payload.current\n      };\n      state.allFavorites.push(cityInfo);\n    }\n    // removeFavorite(state, action) {\n    //     const cityKey = action.payload;\n    //     delete state.allFavorites[cityKey];\n    // }\n  }\n});\n\n//selectors\nexport const selectAllFavorites = state => state.favorites.allFavorites;\nexport const selectFavoriteCity = (state, cityKey) => state.search.allFavorites[cityKey];\n//actions\nexport const {\n  addFavorite,\n  removeFavorite\n} = favoritesSlice.actions;\n//reducer\nexport default favoritesSlice.reducer;","map":{"version":3,"names":["createSlice","getAutocomplete","favoritesSlice","name","initialState","allFavorites","reducers","addFavorite","state","action","cityInfo","key","payload","current","push","selectAllFavorites","favorites","selectFavoriteCity","cityKey","search","removeFavorite","actions","reducer"],"sources":["C:/Users/Liora Ferrero/Documents/Weather App/weather-app/src/features/favorites/favoritesSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { getAutocomplete } from '../../api/accuWeatherFuncs';\r\n\r\n// export const loadAutocomplete = createAsyncThunk(\r\n//   'search/loadAutocomplete',\r\n//   async (payload) => {\r\n//     let autocomplete = [];\r\n//     if (payload.text){\r\n//       autocomplete = await getAutocomplete(payload);\r\n//     }\r\n//     //autocomplete.data.children.map((subreddit) => subreddit.data);\r\n//     return autocomplete;\r\n//   }\r\n// );\r\n\r\nexport const favoritesSlice = createSlice({\r\n    name: 'favorites',\r\n    initialState: {\r\n      allFavorites: [],\r\n    },\r\n    reducers: {\r\n        addFavorite(state, action) {\r\n            const cityInfo = {\r\n                key: action.payload.key,\r\n                name: action.payload.name,\r\n                current: action.payload.current\r\n            };\r\n            state.allFavorites.push(cityInfo);\r\n        },\r\n        // removeFavorite(state, action) {\r\n        //     const cityKey = action.payload;\r\n        //     delete state.allFavorites[cityKey];\r\n        // }\r\n    }\r\n});\r\n\r\n\r\n//selectors\r\nexport const selectAllFavorites = (state) => state.favorites.allFavorites;\r\nexport const selectFavoriteCity = (state, cityKey) => state.search.allFavorites[cityKey];\r\n//actions\r\nexport const {addFavorite, removeFavorite} = favoritesSlice.actions;\r\n//reducer\r\nexport default favoritesSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,eAAe,QAAQ,4BAA4B;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAGF,WAAW,CAAC;EACtCG,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE;IACZC,YAAY,EAAE;EAChB,CAAC;EACDC,QAAQ,EAAE;IACNC,WAAW,CAACC,KAAK,EAAEC,MAAM,EAAE;MACvB,MAAMC,QAAQ,GAAG;QACbC,GAAG,EAAEF,MAAM,CAACG,OAAO,CAACD,GAAG;QACvBR,IAAI,EAAEM,MAAM,CAACG,OAAO,CAACT,IAAI;QACzBU,OAAO,EAAEJ,MAAM,CAACG,OAAO,CAACC;MAC5B,CAAC;MACDL,KAAK,CAACH,YAAY,CAACS,IAAI,CAACJ,QAAQ,CAAC;IACrC;IACA;IACA;IACA;IACA;EACJ;AACJ,CAAC,CAAC;;AAGF;AACA,OAAO,MAAMK,kBAAkB,GAAIP,KAAK,IAAKA,KAAK,CAACQ,SAAS,CAACX,YAAY;AACzE,OAAO,MAAMY,kBAAkB,GAAG,CAACT,KAAK,EAAEU,OAAO,KAAKV,KAAK,CAACW,MAAM,CAACd,YAAY,CAACa,OAAO,CAAC;AACxF;AACA,OAAO,MAAM;EAACX,WAAW;EAAEa;AAAc,CAAC,GAAGlB,cAAc,CAACmB,OAAO;AACnE;AACA,eAAenB,cAAc,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getAutocomplete } from '../../api/accuWeatherFuncs';\nexport const loadAutocomplete = createAsyncThunk('search/loadAutocomplete', async payload => {\n  console.log(payload);\n  const autocomplete = await getAutocomplete(payload);\n  //autocomplete.data.children.map((subreddit) => subreddit.data);\n  console.log(autocomplete);\n  return ['test1', 'test2'];\n});\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState: {\n    searchTerm: '',\n    autocompleteList: [],\n    isLoadingAutocomplete: false,\n    hasError: false\n  },\n  reducers: {\n    setSearchTerm(state, action) {\n      state.searchTerm = action.payload;\n    },\n    clearSearchTerm(state) {\n      state.searchTerm = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loadAutocomplete.pending, state => {\n      state.isLoadingAutocomplete = true;\n      state.hasError = false;\n    }).addCase(loadAutocomplete.fulfilled, (state, action) => {\n      state.isLoadingAutocomplete = false;\n      state.autocompleteList = action.payload;\n    }).addCase(loadAutocomplete.rejected, state => {\n      state.isLoadingAutocomplete = false;\n      state.hasError = true;\n      state.subreddits = [];\n    });\n  }\n});\n\n//selectors\nexport const selectSearchTerm = state => state.search.searchTerm;\nexport const isLoading = state => state.search.loadAutocomplete;\nexport const selectAutocompleteList = state => state.search.autocompleteList;\n//actions\nexport const {\n  setSearchTerm,\n  clearSearchTerm\n} = searchSlice.actions;\n//reducer\nexport default searchSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getAutocomplete","loadAutocomplete","payload","console","log","autocomplete","searchSlice","name","initialState","searchTerm","autocompleteList","isLoadingAutocomplete","hasError","reducers","setSearchTerm","state","action","clearSearchTerm","extraReducers","builder","addCase","pending","fulfilled","rejected","subreddits","selectSearchTerm","search","isLoading","selectAutocompleteList","actions","reducer"],"sources":["C:/Users/Liora Ferrero/Documents/Weather App/weather-app/src/features/search/searchSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { getAutocomplete } from '../../api/accuWeatherFuncs';\r\n\r\nexport const loadAutocomplete = createAsyncThunk(\r\n  'search/loadAutocomplete',\r\n  async (payload) => {\r\n    console.log(payload);\r\n    const autocomplete = await getAutocomplete(payload);\r\n    //autocomplete.data.children.map((subreddit) => subreddit.data);\r\n    console.log(autocomplete);\r\n    return ['test1', 'test2'];\r\n  }\r\n);\r\n\r\nexport const searchSlice = createSlice({\r\n    name: 'search',\r\n    initialState: {\r\n      searchTerm: '',\r\n      autocompleteList: [],\r\n      isLoadingAutocomplete: false,\r\n      hasError: false\r\n    },\r\n    reducers: {\r\n        setSearchTerm(state, action) {\r\n            state.searchTerm = action.payload\r\n        },\r\n        clearSearchTerm(state) {\r\n            state.searchTerm = ''\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n          .addCase(loadAutocomplete.pending, (state) => {\r\n            state.isLoadingAutocomplete = true;\r\n            state.hasError = false;\r\n          })\r\n          .addCase(loadAutocomplete.fulfilled, (state, action) => {\r\n            state.isLoadingAutocomplete = false;\r\n            state.autocompleteList = action.payload;\r\n          })\r\n          .addCase(loadAutocomplete.rejected, (state) => {\r\n            state.isLoadingAutocomplete = false;\r\n            state.hasError = true;\r\n            state.subreddits = [];\r\n          })\r\n      }\r\n});\r\n\r\n\r\n//selectors\r\nexport const selectSearchTerm = (state) => state.search.searchTerm;\r\nexport const isLoading = (state) => state.search.loadAutocomplete;\r\nexport const selectAutocompleteList = (state) => state.search.autocompleteList;\r\n//actions\r\nexport const {setSearchTerm, clearSearchTerm} = searchSlice.actions;\r\n//reducer\r\nexport default searchSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,eAAe,QAAQ,4BAA4B;AAE5D,OAAO,MAAMC,gBAAgB,GAAGH,gBAAgB,CAC9C,yBAAyB,EACzB,MAAOI,OAAO,IAAK;EACjBC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;EACpB,MAAMG,YAAY,GAAG,MAAML,eAAe,CAACE,OAAO,CAAC;EACnD;EACAC,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EACzB,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC;AAC3B,CAAC,CACF;AAED,OAAO,MAAMC,WAAW,GAAGP,WAAW,CAAC;EACnCQ,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZC,UAAU,EAAE,EAAE;IACdC,gBAAgB,EAAE,EAAE;IACpBC,qBAAqB,EAAE,KAAK;IAC5BC,QAAQ,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE;IACNC,aAAa,CAACC,KAAK,EAAEC,MAAM,EAAE;MACzBD,KAAK,CAACN,UAAU,GAAGO,MAAM,CAACd,OAAO;IACrC,CAAC;IACDe,eAAe,CAACF,KAAK,EAAE;MACnBA,KAAK,CAACN,UAAU,GAAG,EAAE;IACzB;EACJ,CAAC;EACDS,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACJC,OAAO,CAACnB,gBAAgB,CAACoB,OAAO,EAAGN,KAAK,IAAK;MAC5CA,KAAK,CAACJ,qBAAqB,GAAG,IAAI;MAClCI,KAAK,CAACH,QAAQ,GAAG,KAAK;IACxB,CAAC,CAAC,CACDQ,OAAO,CAACnB,gBAAgB,CAACqB,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACtDD,KAAK,CAACJ,qBAAqB,GAAG,KAAK;MACnCI,KAAK,CAACL,gBAAgB,GAAGM,MAAM,CAACd,OAAO;IACzC,CAAC,CAAC,CACDkB,OAAO,CAACnB,gBAAgB,CAACsB,QAAQ,EAAGR,KAAK,IAAK;MAC7CA,KAAK,CAACJ,qBAAqB,GAAG,KAAK;MACnCI,KAAK,CAACH,QAAQ,GAAG,IAAI;MACrBG,KAAK,CAACS,UAAU,GAAG,EAAE;IACvB,CAAC,CAAC;EACN;AACN,CAAC,CAAC;;AAGF;AACA,OAAO,MAAMC,gBAAgB,GAAIV,KAAK,IAAKA,KAAK,CAACW,MAAM,CAACjB,UAAU;AAClE,OAAO,MAAMkB,SAAS,GAAIZ,KAAK,IAAKA,KAAK,CAACW,MAAM,CAACzB,gBAAgB;AACjE,OAAO,MAAM2B,sBAAsB,GAAIb,KAAK,IAAKA,KAAK,CAACW,MAAM,CAAChB,gBAAgB;AAC9E;AACA,OAAO,MAAM;EAACI,aAAa;EAAEG;AAAe,CAAC,GAAGX,WAAW,CAACuB,OAAO;AACnE;AACA,eAAevB,WAAW,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
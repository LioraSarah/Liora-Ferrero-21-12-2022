{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Liora Ferrero\\\\Documents\\\\Weather App\\\\weather-app\\\\src\\\\components\\\\home\\\\searchBar\\\\Search.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setSearchTerm, clearSearchTerm, selectSearchTerm, loadAutocomplete, isLoading, selectAutocompleteList } from '../../../features/search/searchSlice.js';\nimport \"./Search.css\";\nimport { setCurrentCityName, setCurrentCityKey } from '../../../features/currentCity/correntCitySlice';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Search = () => {\n  _s();\n  const searchTerm = useSelector(selectSearchTerm);\n  const dispatch = useDispatch();\n  const autocompletePreview = useSelector(selectAutocompleteList);\n  const isLoadingAutocomplete = useSelector(isLoading);\n  let autocompleteDiv = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  useEffect(() => {\n    dispatch(loadAutocomplete({\n      text: searchTerm\n    }));\n  }, [dispatch, searchTerm]);\n  const onSearchTermChangeHandler = e => {\n    const userInput = e.target.value;\n    dispatch(setSearchTerm(userInput));\n  };\n  const onClickHandler = e => {\n    // console.log(e);\n    const clickedCityKey = e.target.id;\n    dispatch(setCurrentCityKey(clickedCityKey));\n  };\n\n  //show Autocomplete only if the search-bar isn't empty and the data is fetched\n  if (isLoadingAutocomplete) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"loading-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"loading\",\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  }\n  console.log(autocompleteDiv);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"search\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        list: \"autocomplete\",\n        id: \"city-search\",\n        name: \"city-choice\",\n        onChange: onSearchTermChangeHandler,\n        className: \"search-box-general\",\n        placeholder: \"Search a city...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n        id: \"autocomplete\",\n        className: \"search-box-general\",\n        children: autocompletePreview.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n          id: city.Key,\n          onClick: onClickHandler,\n          value: `${city.LocalizedName} , ${city.Country.LocalizedName}`\n        }, city.Key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(Search, \"xz2+VJcd/ITzueWmqjo/XHPDqJE=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector];\n});\n_c = Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","setSearchTerm","clearSearchTerm","selectSearchTerm","loadAutocomplete","isLoading","selectAutocompleteList","setCurrentCityName","setCurrentCityKey","Search","searchTerm","dispatch","autocompletePreview","isLoadingAutocomplete","autocompleteDiv","text","onSearchTermChangeHandler","e","userInput","target","value","onClickHandler","clickedCityKey","id","console","log","map","city","Key","LocalizedName","Country"],"sources":["C:/Users/Liora Ferrero/Documents/Weather App/weather-app/src/components/home/searchBar/Search.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setSearchTerm, clearSearchTerm, selectSearchTerm, loadAutocomplete, isLoading, selectAutocompleteList } from '../../../features/search/searchSlice.js';\r\nimport \"./Search.css\"\r\nimport { setCurrentCityName, setCurrentCityKey } from '../../../features/currentCity/correntCitySlice';\r\n\r\n\r\n\r\nexport const Search = () => {\r\n\r\n    const searchTerm = useSelector(selectSearchTerm);\r\n    const dispatch = useDispatch();\r\n    const autocompletePreview = useSelector(selectAutocompleteList);\r\n    const isLoadingAutocomplete = useSelector(isLoading);\r\n    let autocompleteDiv = <></>;\r\n\r\n    useEffect(() => {\r\n        dispatch(loadAutocomplete({ text: searchTerm }));\r\n    }, [dispatch, searchTerm]);\r\n\r\n    \r\n    const onSearchTermChangeHandler = (e) => {\r\n        const userInput = e.target.value;\r\n        dispatch(setSearchTerm(userInput));\r\n    };\r\n\r\n    const onClickHandler = (e) => {\r\n        // console.log(e);\r\n        const clickedCityKey = e.target.id;\r\n        dispatch(setCurrentCityKey(clickedCityKey));\r\n    }\r\n\r\n\r\n    //show Autocomplete only if the search-bar isn't empty and the data is fetched\r\n    if (isLoadingAutocomplete) {\r\n        return <div id=\"loading-container\">\r\n            <p id=\"loading\">loading...</p>\r\n        </div>;\r\n    }\r\n\r\n    console.log(autocompleteDiv);\r\n\r\n    return (\r\n        <div id=\"search\">\r\n            \r\n            <div id=\"search-container\">\r\n            <input list=\"autocomplete\" id=\"city-search\" name=\"city-choice\"\r\n                onChange={onSearchTermChangeHandler}\r\n                className=\"search-box-general\"\r\n                placeholder=\"Search a city...\"\r\n                autoFocus />\r\n            <datalist id=\"autocomplete\" className=\"search-box-general\">\r\n                {autocompletePreview.map((city) => (\r\n                    <option key={city.Key} id={city.Key} onClick={onClickHandler} \r\n                    value={`${city.LocalizedName} , ${city.Country.LocalizedName}`} />\r\n                ))}\r\n            </datalist>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,aAAa,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,sBAAsB,QAAQ,yCAAyC;AAC/J,OAAO,cAAc;AACrB,SAASC,kBAAkB,EAAEC,iBAAiB,QAAQ,gDAAgD;AAAC;AAAA;AAIvG,OAAO,MAAMC,MAAM,GAAG,MAAM;EAAA;EAExB,MAAMC,UAAU,GAAGX,WAAW,CAACI,gBAAgB,CAAC;EAChD,MAAMQ,QAAQ,GAAGX,WAAW,EAAE;EAC9B,MAAMY,mBAAmB,GAAGb,WAAW,CAACO,sBAAsB,CAAC;EAC/D,MAAMO,qBAAqB,GAAGd,WAAW,CAACM,SAAS,CAAC;EACpD,IAAIS,eAAe,gBAAG,qCAAK;EAE3BhB,SAAS,CAAC,MAAM;IACZa,QAAQ,CAACP,gBAAgB,CAAC;MAAEW,IAAI,EAAEL;IAAW,CAAC,CAAC,CAAC;EACpD,CAAC,EAAE,CAACC,QAAQ,EAAED,UAAU,CAAC,CAAC;EAG1B,MAAMM,yBAAyB,GAAIC,CAAC,IAAK;IACrC,MAAMC,SAAS,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAChCT,QAAQ,CAACV,aAAa,CAACiB,SAAS,CAAC,CAAC;EACtC,CAAC;EAED,MAAMG,cAAc,GAAIJ,CAAC,IAAK;IAC1B;IACA,MAAMK,cAAc,GAAGL,CAAC,CAACE,MAAM,CAACI,EAAE;IAClCZ,QAAQ,CAACH,iBAAiB,CAACc,cAAc,CAAC,CAAC;EAC/C,CAAC;;EAGD;EACA,IAAIT,qBAAqB,EAAE;IACvB,oBAAO;MAAK,EAAE,EAAC,mBAAmB;MAAA,uBAC9B;QAAG,EAAE,EAAC,SAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAe;MAAA;MAAA;MAAA;IAAA,QAC5B;EACV;EAEAW,OAAO,CAACC,GAAG,CAACX,eAAe,CAAC;EAE5B,oBACI;IAAK,EAAE,EAAC,QAAQ;IAAA,uBAEZ;MAAK,EAAE,EAAC,kBAAkB;MAAA,wBAC1B;QAAO,IAAI,EAAC,cAAc;QAAC,EAAE,EAAC,aAAa;QAAC,IAAI,EAAC,aAAa;QAC1D,QAAQ,EAAEE,yBAA0B;QACpC,SAAS,EAAC,oBAAoB;QAC9B,WAAW,EAAC,kBAAkB;QAC9B,SAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QAAG,eAChB;QAAU,EAAE,EAAC,cAAc;QAAC,SAAS,EAAC,oBAAoB;QAAA,UACrDJ,mBAAmB,CAACc,GAAG,CAAEC,IAAI,iBAC1B;UAAuB,EAAE,EAAEA,IAAI,CAACC,GAAI;UAAC,OAAO,EAAEP,cAAe;UAC7D,KAAK,EAAG,GAAEM,IAAI,CAACE,aAAc,MAAKF,IAAI,CAACG,OAAO,CAACD,aAAc;QAAE,GADlDF,IAAI,CAACC,GAAG;UAAA;UAAA;UAAA;QAAA,QAExB;MAAC;QAAA;QAAA;QAAA;MAAA,QACK;IAAA;MAAA;MAAA;MAAA;IAAA;EACL;IAAA;IAAA;IAAA;EAAA,QAEJ;AAGd,CAAC;AAAA,GAtDYnB,MAAM;EAAA,QAEIV,WAAW,EACbC,WAAW,EACAD,WAAW,EACTA,WAAW;AAAA;AAAA,KALhCU,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}